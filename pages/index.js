import React, {useState,useEffect,useRef} from 'react'
import Head from 'next/head'
import Image from 'next/image'
import AlignItems from '../lib/AlignItems'
import Button from '../lib/Button'
import Footer from '../lib/Footer'
import styles from '../styles/Home.module.css'
import logo from '../public/sg-banner-logo.png'
import PostThumbNail from '../lib/PostThumbNail'

import { useRouter } from 'next/router'

import { VscChevronRight,VscAccount,VscLinkExternal,VscAdd,VscHeart,VscBook,VscSignOut,VscSignIn, VscSave, VscClose, VscRocket, VscMenu, VscFold, VscGithubAlt, VscComment } from "react-icons/vsc";

import {app,analytics,auth,db} from '../firebase'
import { useAuthState, useSignInWithGoogle } from 'react-firebase-hooks/auth';
import { doc, addDoc, collection, query, where, getDocs,getDoc } from "firebase/firestore";

import LoadingBar from 'react-top-loading-bar';

import StaticGrid from '../lib/StaticGrid'
import TypeButton from '../lib/TypeButton'



import * as Scroll from 'react-scroll';
import CreatePlaceForm from '../lib/CreatePlaceForm'
import DistortionCarousel from '../lib/DistortionCarousel'
import { useCollection, useDocument } from 'react-firebase-hooks/firestore';

import { isBrowser } from 'react-device-detect';
import Link from 'next/link'
import End from '../lib/End'


import Modal from 'react-modal';
import FetchSinglePlace from '../lib/FetchSinglePlace'

import Masonry, {ResponsiveMasonry} from "react-responsive-masonry"

import { useAutoAnimate } from '@formkit/auto-animate/react'
import {buttonSound, selectSound, tapSound} from '../lib/sound/audio'
import { signOut } from 'firebase/auth'
import SidePannel from '../lib/SidePannel'
import Select from 'react-select'
import { prefectureData } from '../prefectureData'
import LoadingAnimation from '../lib/LoadingAnimation'
import ThisMonthPlace from '../lib/ThisMonthPlace'

export default function Home() {
  const router = useRouter();

  // Animations
  let scroll = Scroll.animateScroll;
  let scroller = Scroll.scroller;
  let scrollAnimation = {
    duration: 500,
    delay: 100,
    smooth: true,
    offset: -100,
  }
  const [parent] = useAutoAnimate();
  const [progress, setProgress] = useState(0);  
  
  // Modal / Popup State
  const [modalIsOpen, setModalIsOpen] = useState(false);
  const [gettingStartedModalIsOpen, setGettingStartedModalIsOpen] = useState(false);
  const [createNew, setCreateNew] = useState(false);
  const createNewRef = useRef();
  const [menuDisplay, setMenuDisplay] = useState(false);

  // Auth & Firestore
  const [signInWithGoogle] = useSignInWithGoogle(auth);
  const [user] = useAuthState(auth);
  const [placesCollection, placeCollectionLoading] = useCollection(collection(db, `places`))

  const [prefectureInput, setPrefectureInput] = useState('東京都');
  const [userLikesArray] = useDocument(doc(db, `users/${user && user.uid}`));

  useEffect(() => {
    if (user && user.metadata.creationTime == user.metadata.lastSignInTime) {
      setGettingStartedModalIsOpen(true)
    }
  }, [user])

  const [filteredPlaces,filteredPlacesLoading] = useCollection(query(collection(db, `places`),where("prefecture", "==",`${prefectureInput && prefectureInput}`)));

  const selectStyle = {
    option: (provided, state) => ({
      ...provided,
      backgroundColor: state.isSelected ? 'black' : 'white',
      color: state.isSelected ? 'white' : 'black',
      padding: '0.5em 1em',
      "&:hover": {
        cursor: 'pointer',
        background: "var(--sgLightGray)",
        color:'black',
      }
    }),
    control: base => ({
      ...base,
      // none of react-select's styles are passed to <Control />
      width: '100%',
      borderRadius:'5px 5px 0px 0px',
      border:'none',
      borderBottom: '1px solid var(--sgGray)',
      padding:'0em',
      fontSize: '1.6em',
      outline: 'none',
      color: 'black',
      boxShadow: 'none',
      width:'fit-content',
      "&:hover": {
        backgroundColor: 'var(--sgLightGray)',
        cursor: 'pointer',
        // borderColor: "var(--sgLightGray)"
      }
    }),
    singleValue: (provided, state) => {
      const opacity = state.isDisabled ? 0.5 : 1;
      const transition = 'opacity 300ms';
      return { ...provided, opacity, transition };
    }
  }
  
  
  return (
    <div className={'pagePadding'}>
      <LoadingBar
        color='black'
        progress={progress}
        onLoaderFinished={() => setProgress(0)}
      />
      <Head>
        <title>SEIRYO GROUND</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {user && 
        <>
          <Modal
            ref={parent}
            isOpen={gettingStartedModalIsOpen}
            style={{
              content: {
                top: '50%',
                left: '50%',
                right: 'auto',
                bottom: 'auto',
                marginRight: '-50%',
                transform: 'translate(-50%, -50%)',
                padding: '2em',
                width:'400px',
                height:'fit-content',
                overflowY:'scroll',
                borderRadius: '30px',
                backgroundColor:'black',
                color: 'white',
                border:'1px solid black',
                zIndex:2,
                // boxShadow: '0px 0px 15px #f0f0f0',                
                // animation: 'popOutFromRight 0.4s'
              },
              overlay: {
                background: 'linear-gradient(to bottom,rgba(255,255,255,0) 0%,white 100%)',
                backdropFilter:'blur(10px)',
                zIndex:20,
                cursor:'pointer',
                transition: '0.2s'
              }
            }}
            onRequestClose={()=>setGettingStartedModalIsOpen(false)}
          >
            <AlignItems justifyContent={'center'}>
                <h2>初めまして</h2>
            </AlignItems>
            <StaticGrid
              grid={'1fr'}
              gap={'0'}
            >
              <p>
                <strong>SEIRYO GROUNDへようこそ。</strong>
                <br/>
                本サイトにログインしてくださりありがとうございます。
                <br/>
                <br/>
                清涼広場は、清涼感を味える場所・自然や文化と一体化できる場所等をご紹介するサイトです。場所はそれぞれ「緑」「青」「赤」「紫」という4つのカテゴリーに振り分けられており、誰もがログインして投稿できる形となっています。
              </p>
              <ul>
                <li><a>清涼広場について</a></li>
                <li><a>Eminentについて</a></li>
                <li><a>清涼ニュース</a></li>
                <li><a>SEIRYO Photographer</a></li>
              </ul>
              <p>※外をクリックすると消えます。</p>
            </StaticGrid>
          </Modal>
          {/* <SidePannel>
            <StaticGrid
              grid={'1fr'}
              gap={'0'}
            >
              {
                userLikesArray &&
                userLikesArray.data() && 
                userLikesArray.data().likes.map((likes)=>{
                  return(
                    <FetchSinglePlace
                      key={likes}
                      documentId={likes}
                    />
                  )
              })}
            </StaticGrid>
          </SidePannel> */}
        </>
      }

      <div className={'stickySide'}>
        {isBrowser &&         
          <section
            style={{
              maxWidth:'300px',
              minWidth:'200px',
              position: 'sticky',
              top: '0px',
              display: 'flex',
              height: '100vh',
              flexDirection: 'column',
              justifyContent:'space-between',
              background: 'linear-gradient(to left, var(--sgLightGray) 0%,white 100%)',
              borderRadius: '0 30px 30px 0',
              zIndex:1
            }}
          >
            <div
              style={{
                minWidth:'max-content',
                margin:0,
                marginTop: '1em',
                padding:0,
                writingMode:'vertical-lr',
                textOrientation:'mixed'
              }}
            >
              <p style={{margin:0}}>Designed & Produced by 501A.<br/>Managed By Eminent, a Design Nerd Duo.</p>
              <h2 style={{marginLeft:0}}>
                SEIRYO GROUND
                <br/>
                清涼広場
              </h2>
            </div>
            <Footer>
              <StaticGrid>
                {!user &&
                  <Button
                    iconPosition={'left'}
                    icon={<VscSignIn/>}
                    onClick={()=>{
                      buttonSound();
                      signInWithGoogle();
                    }}
                  >
                    Googleでログイン
                  </Button>
                }
                <Button
                  iconPosition={'left'}
                  icon={<VscComment/>}
                  onClick={()=>{
                    buttonSound();
                    router.push('/news');
                  }}
                >
                  ニュース
                </Button>
                <Button
                  iconPosition={'left'}
                  icon={<VscBook/>}
                  onClick={()=>{
                    buttonSound();
                    router.push('/about');
                  }}
                >
                  清涼広場について
                </Button>
                <Button
                  iconPosition={'left'}
                  icon={<VscGithubAlt/>}
                  onClick={()=>{
                    buttonSound();
                    router.push('https://github.com/501A-Designs/seiryo-ground');
                  }}
                >
                  GitHubを開く
                </Button>
                {user && 
                <>                
                  <Button
                    iconPosition={'left'}
                    icon={<VscSignOut/>}
                    onClick={()=>{
                      buttonSound();
                      signOut(auth)
                    }}
                  >
                    ログアウト
                  </Button>
                  <div
                    style={{
                      backgroundColor:'black',
                      boxShadow:'0 0 10px var(--sgLightGray)',
                      border: '1px solid var(--sgGray)',
                      marginRight:'1em',
                      marginTop:'1em',
                      borderRadius: '15px',
                      padding: '1em',
                      display: 'flex',
                      justifyContent: 'left'
                    }}
                  >
                    <AlignItems gap={'1em'}>
                      <img
                        src={user.photoURL}
                        width="25"
                        height="25"
                        style={{
                          borderRadius: '50px',
                          border: '1px solid var(--sgGray)',
                        }}
                      />
                      <h4 style={{color:'var(--sgLightGray)',minWidth:'min-content', margin:0}}>{user.displayName.split(' ')[0]}</h4>
                    </AlignItems>
                  </div>
                </>
                }
              </StaticGrid>
            </Footer>
          </section>
        }


        <StaticGrid gap={'3em'}>
          <StaticGrid gap={'2.5vh'}>
            <div
              style={{
                minHeight: '15vh',
                textAlign:'right',
                display: 'flex',
                justifyContent: 'right'
              }}
            >
              <div
                style={{
                  alignSelf: 'flex-end'
                }}
              >
                <p>Photo By <Link href="https://twitter.com/EyesObsolete"><a>@EyesObsolete</a></Link></p>
                <h3 style={{ margin:0}}>
                  清涼広場へようこそ
                </h3>
                <p
                  style={{
                    margin:0,
                    // WebkitTextStroke: '1px black',
                    // color: 'transparent'
                  }}
                >
                  DMS Lat: 35° 39 10.1952N DMS Long: 139° 50 22.1208E
                </p>
              </div>
            </div>
            <DistortionCarousel
              images={[
                '/blue-sky.jpg',
                '/mountain-green.jpg',
                '/sg-mountain.png',
                '/open-nakameguro.jpg',
                '/sg-mountain2.png',
              ]}
              displacmentImage={'https://raw.githubusercontent.com/robin-dela/hover-effect/master/images/heightMap.png'}
              speed={5}
            />
          </StaticGrid>

          {user &&
            <AlignItems justifyContent={'center'}>
              {
                createNew ?
                <Button
                  iconPosition={'left'}
                  icon={<VscClose/>}
                  onClick={()=>{
                    buttonSound();
                    setCreateNew(false);
                  }}
                >
                  閉じる
                </Button>:
                <Button
                  iconPosition={'left'}
                  icon={<VscAdd/>}
                  onClick={()=>{
                    buttonSound();
                    setCreateNew(true);
                    scroller.scrollTo('createPlaceForm',scrollAnimation)
                  }}
                >
                  場所を追加
                </Button>
              }
              {/* <Button
                iconPosition={'left'}
                icon={<VscHeart/>}
                onClick={()=>{
                  buttonSound();
                  setModalIsOpen(true)
                }}
              >
                好きな場所
              </Button> */}
            </AlignItems>
          }
          {user && 
            <div ref={parent} name={'createPlaceForm'}>
              {createNew && 
                <CreatePlaceForm
                  user={user}
                  ref={createNewRef}
                />
              }
            </div>
          }

          <StaticGrid gap={'0.7em'}>
            <AlignItems spaceBetween>
              <h2 style={{margin:'0 0.2em 0 0'}}>Monthly Special</h2>
              {/* {filteredPlaces && filteredPlaces.docs.length > 0 && <h3 style={{margin:0}}>合計{filteredPlaces.docs.length}カ所</h3>} */}
            </AlignItems>
            <ResponsiveMasonry columnsCountBreakPoints={{350: 1, 750: 2,}}>
              <Masonry gutter={'0.25em'}>
                <ThisMonthPlace
                  prefecture={'東京都'}
                  name={"OPEN NAKAMEGURO"}
                  type="red"
                  description={'中目黒にあるオシャレなカフェ。恵比寿駅から少し歩いた場所でもあります。'}
                  onClick={() =>{
                    tapSound();
                  }}
                />
              </Masonry>
            </ResponsiveMasonry>
          </StaticGrid>


          <StaticGrid gap={'0.7em'}>
            <AlignItems spaceBetween>
              <h2 style={{margin:'0', width:'fit-content'}}>
                Recent Reviews
              </h2>
              {/* <Button
                onClick={()=> {
                  buttonSound();
                  router.push('/fullmap')
                }}
              >
                地図で見る
              </Button> */}
            </AlignItems>
            <div ref={parent}>
              {placesCollection && <ResponsiveMasonry
                columnsCountBreakPoints={{350: 1, 750: 2, 900: 3, 1200:4}}
              >
                <Masonry
                  gutter={'0.25em'}
                >
                  {placesCollection.docs.map(doc => {
                    return (
                      <PostThumbNail
                        key={doc.id}
                        id={doc.id}
                        title={doc.data().name}
                        type={doc.data().type}
                      />
                    )
                  })}
                </Masonry>
              </ResponsiveMasonry>}
              {placeCollectionLoading && <LoadingAnimation/>}
            </div>
          </StaticGrid>

          {/* <h3 style={{margin:'0 0.2em 0 0'}}>他の場所</h3> */}
          {/* Filter Section */}
          <StaticGrid gap={'0.7em'}>
            <AlignItems spaceBetween>
              <AlignItems gap={'0.5em'}>
                <h2 style={{margin:'0 0.2em 0 0'}}>Filter: </h2>
                <Select
                  styles={selectStyle}
                  options={prefectureData}
                  components={{ DropdownIndicator:() => null, IndicatorSeparator:() => null }}
                  onChange={(e)=>{
                    selectSound();
                    setPrefectureInput(e.value);
                  }}
                  placeholder={prefectureInput ? prefectureInput:'都道府県を選択'}
                />
              </AlignItems>
              {filteredPlaces && filteredPlaces.docs.length > 0 && <h3 style={{margin:0}}>合計{filteredPlaces.docs.length}カ所</h3>}
            </AlignItems>
            <div ref={parent}>
              {filteredPlaces && filteredPlaces.docs.length > 0 ?
                <ResponsiveMasonry columnsCountBreakPoints={{350: 1, 750: 2, 900: 3, 1200:4}}>
                  <Masonry gutter={'0.25em'}>
                    {filteredPlaces.docs.map(doc => {
                      return (
                        <PostThumbNail
                          key={doc.id}
                          id={doc.id}
                          title={doc.data().name}
                          type={doc.data().type}
                        />
                      )
                    })}
                  </Masonry>
                </ResponsiveMasonry>:
                <>
                  {!filteredPlacesLoading &&
                    <LoadingAnimation noAnimation title=":(">
                      <p>{prefectureInput}にある場所は現在何も見つかりません。</p>
                    </LoadingAnimation>
                  }
                </>
              }
              {filteredPlacesLoading && <LoadingAnimation/>}
            </div>
          </StaticGrid>

          {/* All Locations */}
          <StaticGrid gap={'0.7em'}>
            <AlignItems spaceBetween>
              <h2 style={{margin:'0', width:'fit-content'}}>
                All Locations
              </h2>
              {/* <Button
                onClick={()=> {
                  buttonSound();
                  router.push('/fullmap')
                }}
              >
                地図で見る
              </Button> */}
            </AlignItems>
            <div ref={parent}>
              {placesCollection && <ResponsiveMasonry
                columnsCountBreakPoints={{350: 1, 750: 2, 900: 3, 1200:4}}
              >
                <Masonry
                  gutter={'0.25em'}
                >
                  {placesCollection.docs.map(doc => {
                    return (
                      <PostThumbNail
                        key={doc.id}
                        id={doc.id}
                        title={doc.data().name}
                        type={doc.data().type}
                      />
                    )
                  })}
                </Masonry>
              </ResponsiveMasonry>}
              {placeCollectionLoading && <LoadingAnimation/>}
            </div>
          </StaticGrid>

          {/* Bottom Area */}
          <Button onClick={()=>{scroll.scrollToTop()}}>上へ戻る</Button>
          <End/>
        </StaticGrid>
      </div>
    </div>
  )
}
