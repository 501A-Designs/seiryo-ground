import React, {useState,useEffect,useRef} from 'react'
import Head from 'next/head'
import Image from 'next/image'
import AlignItems from '../lib/AlignItems'
import Button from '../lib/Button'
import Footer from '../lib/Footer'
import styles from '../styles/Home.module.css'
import logo from '../public/sg-banner-logo.png'
import PostThumbNail from '../lib/PostThumbNail'

import { useRouter } from 'next/router'

import { VscChevronRight,VscAccount,VscLinkExternal,VscAdd,VscHeart,VscBook,VscSignOut,VscSignIn, VscSave, VscClose, VscRocket, VscMenu, VscFold, VscGithubAlt, VscComment } from "react-icons/vsc";

import {app,analytics,auth,db} from '../firebase'
import { useAuthState, useSignInWithGoogle } from 'react-firebase-hooks/auth';
import { doc, addDoc, collection, query, where, getDocs,getDoc } from "firebase/firestore";

import LoadingBar from 'react-top-loading-bar';

import Input from '../lib/Input'
import TextArea from '../lib/TextArea'

import StaticGrid from '../lib/StaticGrid'
import TypeButton from '../lib/TypeButton'



import * as Scroll from 'react-scroll';
import CreatePlaceForm from '../lib/CreatePlaceForm'
import DistortionCarousel from '../lib/DistortionCarousel'
import { useCollection, useDocument } from 'react-firebase-hooks/firestore';

import { isBrowser } from 'react-device-detect';
import Link from 'next/link'
import End from '../lib/End'


import Modal from 'react-modal';
import FetchSinglePlace from '../lib/FetchSinglePlace'

import Masonry, {ResponsiveMasonry} from "react-responsive-masonry"

import { useAutoAnimate } from '@formkit/auto-animate/react'
import {buttonSound} from '../lib/sound/audio'

const customStyles = {
  content: {
    top: '5%',
    left: '80%',
    bottom: 'auto',
    padding: '0 0 1em 0',
    width:'20%',
    maxHeight:'85%',
    overflowY:'scroll',
    borderRadius: '10px 0 0 10px',
    boxShadow: '0px 0px 15px #f0f0f0',
    zIndex:2,
    animation: 'popOut 0.4s'
  },
  overlay: {
    background: 'linear-gradient(to right,rgba(255,255,255,0) 0%,white 100%)',
    // backdropFilter: `blur(3px)`,
    zIndex:20,
    cursor:'pointer',
    transition: '0.2s'
  }
};

export default function Home() {
  const router = useRouter();
  let scroll = Scroll.animateScroll;
  const [parent] = useAutoAnimate();
  const [modalIsOpen, setModalIsOpen] = useState(false);

  const [signInWithGoogle] = useSignInWithGoogle(auth);
  const [user] = useAuthState(auth);
  const [progress, setProgress] = useState(0);

  const [placesCollection] = useCollection(collection(db, `places`))
  const [userLikesArray] = useDocument(doc(db, `users/${user && user.uid}`));

  const [createNew, setCreateNew] = useState(false);
  const createNewRef = useRef();
  
  const [menuDisplay, setMenuDisplay] = useState(false);
  useEffect(() => {
    if (isBrowser) {
      setMenuDisplay(true);
    }
  }, [isBrowser])
  
  
  return (
    <div
      className={'pagePadding'}
    >
      <LoadingBar
        color='black'
        progress={progress}
        onLoaderFinished={() => setProgress(0)}
      />
      <Head>
        <title>SEIRYO GROUND</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {user && 
      <Modal
        ref={parent}
        isOpen={modalIsOpen}
        style={customStyles}
        onRequestClose={()=>setModalIsOpen(false)}
      >
        <div
          style={{
            backgroundColor: 'black',
            color: 'white',
            marginBottom:'0.5em'
          }}
        >
          <AlignItems justifyContent={'center'}>
            <h5>好きな場所一覧</h5>
          </AlignItems>
        </div>
        <StaticGrid
          grid={'1fr'}
          gap={'0'}
        >
          {userLikesArray && userLikesArray.data().likes.map((likes)=>{
            return(
              <FetchSinglePlace
                key={likes}
                documentId={likes}
              />
            )
          })}
        </StaticGrid>
      </Modal>
      }

      <div className={'stickySide'}>
        {isBrowser &&         
          <section
            style={{
              maxWidth:'300px',
              minWidth:'200px',
              position: 'sticky',
              top: '0px',
              display: 'flex',
              height: '100vh',
              flexDirection: 'column',
              justifyContent:'space-between',
              background: 'linear-gradient(to left, var(--sgLightGray) 0%,white 100%)',

              zIndex:1
            }}
          >
            <div
              style={{
                minWidth:'max-content',
                margin:0,
                marginTop: '1em',
                padding:0,
                writingMode:'vertical-lr',
                textOrientation:'mixed'
              }}
            >
              <p style={{margin:0}}>Designed & Produced by 501A.<br/>Managed By Eminent, a Design Nerd Duo.</p>
              <h2 style={{marginLeft:0}}>
                SEIRYO GROUND
                <br/>
                清涼広場
              </h2>
            </div>
            <Footer>
              <StaticGrid>
                {!user &&
                  <Button
                    iconPosition={'left'}
                    icon={<VscSignIn/>}
                    onClick={()=>{
                      buttonSound();
                      signInWithGoogle();
                    }}
                  >
                    Googleでログイン
                  </Button>
                }
                <Button
                  iconPosition={'left'}
                  icon={<VscComment/>}
                  onClick={()=>{
                    buttonSound();
                    router.push('/news');
                  }}
                >
                  ニュース
                </Button>
                <Button
                  iconPosition={'left'}
                  icon={<VscBook/>}
                  onClick={()=>{
                    buttonSound();
                    router.push('/about');
                  }}
                >
                  清涼広場について
                </Button>
                <Button
                  iconPosition={'left'}
                  icon={<VscGithubAlt/>}
                  onClick={()=>{
                    buttonSound();
                    router.push('https://github.com/501A-Designs/seiryo-ground');
                  }}
                >
                  GitHubを開く
                </Button>
                {user && 
                  <Button
                    iconPosition={'left'}
                    icon={<VscSignOut/>}
                    onClick={()=>{
                      buttonSound();
                      signInWithGoogle()
                    }}
                  >
                    ログアウト
                  </Button>
                }
              </StaticGrid>
            </Footer>
          </section>
        }


        <StaticGrid gap={'0.5em'}>
          {user &&          
            <AlignItems spaceBetween margin={'1.5em 0 0 0'}>
              <AlignItems>
                <Button
                  iconPosition={'left'}
                  icon={<VscAdd/>}
                  onClick={()=>{
                    scroll.scrollToTop();
                    buttonSound();
                    setCreateNew(true);
                  }}
                >
                  場所を追加
                </Button>
                <Button
                  iconPosition={'left'}
                  icon={<VscHeart/>}
                  onClick={()=>{
                    buttonSound();
                    setModalIsOpen(true)
                  }}
                >
                  好きな場所
                </Button>
              </AlignItems>
              <div style={{padding:'0em',backgroundColor: 'white'}}>
                <AlignItems gap={'0.5em'}>
                  <img src={user.photoURL} width="20" height="20" style={{borderRadius: '50px'}}/>
                  <h4 style={{color:'black',minWidth:'max-content',}}>{user.displayName}</h4>
                </AlignItems>
              </div>
            </AlignItems>
          }
          {user ?
            <div
              ref={parent}
            >
              {createNew && 
                <CreatePlaceForm
                  user={user}
                  ref={createNewRef}
                  closeThisForm={()=>{
                    buttonSound();
                    setCreateNew(false);
                  }}
                />
              }
            </div>:
            <>
              <div
                style={{
                  minHeight: '20vh',
                  textAlign:'right',
                  display: 'flex',
                  justifyContent: 'right'
                }}
              >
                <div
                  style={{
                    alignSelf: 'flex-end'
                  }}
                >
                  <p>Photo By <Link href="https://twitter.com/EyesObsolete"><a>@EyesObsolete</a></Link></p>
                  <h3 style={{ margin:0}}>
                    清涼広場へようこそ
                  </h3>
                  <p
                    style={{
                      margin:0,
                      // WebkitTextStroke: '1px black',
                      // color: 'transparent'
                    }}
                  >
                      DMS Lat: 35° 39 10.1952N DMS Long: 139° 50 22.1208E
                  </p>
                </div>
              </div>
              <DistortionCarousel
                images={[
                  '/sg-mountain.png',
                  '/sg-mountain2.png',
                ]}
                displacmentImage={'https://raw.githubusercontent.com/robin-dela/hover-effect/master/images/heightMap.png'}
                speed={5}
              />
            </>
          }

          <h2 style={{marginBottom:'0.1em'}}>Recent</h2>
          <ResponsiveMasonry
            columnsCountBreakPoints={{350: 1, 750: 2, 900: 3, 1200:4}}
          >
            <Masonry
              gutter={'0.25em'}
            >
              {placesCollection && placesCollection.docs.map(doc => {
                return (
                  <PostThumbNail
                    key={doc.id}
                    id={doc.id}
                    title={doc.data().name}
                    type={doc.data().type}
                  />
                )
              })}
            </Masonry>
          </ResponsiveMasonry>

          <h2 style={{marginBottom:'0.1em'}}>All Location</h2>
          <ResponsiveMasonry
            columnsCountBreakPoints={{350: 1, 750: 2, 900: 3, 1200:4}}
          >
            <Masonry
              gutter={'0.25em'}
            >
              {placesCollection && placesCollection.docs.map(doc => {
                return (
                  <PostThumbNail
                    key={doc.id}
                    id={doc.id}
                    title={doc.data().name}
                    type={doc.data().type}
                  />
                )
              })}
            </Masonry>
          </ResponsiveMasonry>
          {/* <StaticGrid grid={isBrowser ? '1fr 1fr 1fr':'1fr'} gap={'0.25em'}>
          </StaticGrid> */}
          <End/>
        </StaticGrid>
      </div>
    </div>
  )
}
