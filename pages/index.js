import React, {useState,useEffect,useRef} from 'react'
import Head from 'next/head'
import Image from 'next/image'
import AlignItems from '../lib/AlignItems'
import Button from '../lib/Button'
import Footer from '../lib/Footer'
import styles from '../styles/Home.module.css'
import logo from '../public/sg-banner-logo.png'
import PostThumbNail from '../lib/PostThumbNail'

import { useRouter } from 'next/router'

import { VscChevronRight,VscAccount,VscLinkExternal,VscAdd,VscHeart,VscLocation,VscMegaphone,VscBook,VscSignOut,VscSignIn, VscSave, VscClose, VscRocket } from "react-icons/vsc";

import {app,analytics,auth,db} from '../firebase'
import { useAuthState, useSignInWithGoogle } from 'react-firebase-hooks/auth';
import { doc, addDoc, collection, query, where, getDocs } from "firebase/firestore";

import LoadingBar from 'react-top-loading-bar';

import Input from '../lib/Input'
import TextArea from '../lib/TextArea'

import StaticGrid from '../lib/StaticGrid'
import TypeButton from '../lib/TypeButton'



import * as Scroll from 'react-scroll';
import CreatePlaceForm from '../lib/CreatePlaceForm'


export default function Home() {
  const router = useRouter();
  let scroll = Scroll.animateScroll;

  const [signInWithGoogle] = useSignInWithGoogle(auth);
  const [user, loading, error] = useAuthState(auth);
  const [progress, setProgress] = useState(0);

  let placesArray = [];
  const [fetchedData, setFetchedData] = useState()

  const fetchData = async () => {
    // , where("published", "==", true)
    const querySnapshot = await getDocs(query(collection(db, "places")))
    if (placesArray.length === 0) {                
      querySnapshot.forEach((doc) => {
        placesArray.push(
          {
            data:doc.data(),
            id:doc.id
          }
        );
      });
      setFetchedData(placesArray);
    }
    setProgress(100);
  }
  
  useEffect(() => {
    fetchData();
  }, [user])

  const [createNew, setCreateNew] = useState(false);
  const createNewRef = useRef();
  let newPostNumber = 0;

  
  function GradientSquare(props) {
    const [hover, setHover] = useState(false)
    const [mousePosition, setMousePosition] = useState({x: 0, y: 0})
    const gradientSquare = {
      background: props.gradient,
      color: 'black',
      width: '100%',
      height: '80vh',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      cursor: 'pointer',
      transition: '1s ease-out',
      transform: `${hover ? 'scale(0.8, 0.8)':'none'}`,
      borderRadius: `${hover ? '300px':'0px'}`
    }
    return (
      <div
        style={gradientSquare}
        onMouseOver={()=>setHover(true)}
        onMouseLeave={()=>setHover(false)}
      />
    )
  }
  
  
  return (
    <div
      className={'pagePadding'}
    >
      <Head>
        <title>SEIRYO GROUND</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div
        style={{
          display: 'flex',
          alignItems: 'flex-start',
          gap:'1.5em'
        }}
      >
        <section
          style={{
            width:'400px',
            position: 'sticky',
            top: '0px',
            display: 'flex',
            height: '100vh',
            flexDirection: 'column',
            justifyContent:'space-between',
          }}
        >
          <StaticGrid>
            <div
              style={{
                padding:'1.5em 0'
              }}
            >
              <h1
                className="seiryoGroundFont"
                style={{
                  letterSpacing:'-6px',
                  lineHeight:'0.9em',
                  margin:0
                }}
              >
                SEIRYO<br/>GROUND
                {/* {user.displayName.split(' ')[0]} */}
              </h1>
            </div>

            {user ?
              <>
                <Button
                  iconPosition={'right'}
                  icon={<VscAdd/>}
                  onClick={()=>{
                    scroll.scrollToTop();
                    setCreateNew(true);
                  }}
                >
                  場所を追加
                </Button>
                <Button
                  icon={<VscHeart/>}
                  iconPosition={'right'}
                  onClick={()=>router.push('/like')}
                >
                  好きな場所
                </Button>
              </>:
              <Button
                iconPosition={'right'}
                icon={<VscSignIn/>}
                onClick={()=>signInWithGoogle()}
              >
                 GOOGLEでログイン
              </Button>
            }
            <Button
              iconPosition={'right'}
              icon={<VscLocation/>}
              onClick={()=>router.push('/place')}
            >
              場所を探す
            </Button>
            <Button
              iconPosition={'right'}
              icon={<VscMegaphone/>}
              onClick={()=>router.push('/news')}
            >
              SG NEWS
            </Button>
            <Button
              iconPosition={'right'}
              icon={<VscBook/>}
              onClick={()=>router.push('/about')}
            >
              SEIRYO GROUNDについて
            </Button>
            <Button
              iconPosition={'right'}
              icon={<VscLinkExternal/>}
              onClick={()=>router.push('/about')}
            >
              GITHUBを開く
            </Button>
            {user && 
              <Button
                iconPosition={'right'}
                icon={<VscSignOut/>}
                onClick={()=>signInWithGoogle()}
              >
                ログアウト
              </Button>
            }
          </StaticGrid>
          <StaticGrid>
            {user ? 
              <div style={{padding:'0em',backgroundColor: 'white'}}>
                <AlignItems gap={'1em'}>
                  <img src={user.photoURL} width="40" height="40" style={{borderRadius: '15px'}}/>
                  <h3 style={{color:'black'}}>{user.displayName}</h3>
                </AlignItems>
              </div>:            
              <p>
                外を歩き回り、今までいって良かった場所を一箇所にまとめた場所。カードをクリックして頂くと詳細やレビューを見ることができます。
              </p>
            }
            <Footer></Footer>
          </StaticGrid>
        </section>
        <StaticGrid>
          {user ?
            <>
              {createNew && 
                <CreatePlaceForm
                  user={user}
                  ref={createNewRef}
                  closeThisForm={()=>setCreateNew(false)}
                />
              }
            </>:
            <>
              <GradientSquare gradient={'linear-gradient(90deg, #ECFC8D 0%, #91FB5F 100%)'}/>
              <h2 style={{minHeight: '20vh'}}>Trees. Green. Creating our O2<br/>植物。緑。我々の酸素。</h2>

              <GradientSquare gradient={'linear-gradient(90deg, #8DFCE8 0%, #5FC3FB 100%)'}/>
              <h2 style={{minHeight: '20vh'}}>Oceans. Blue. The Source of Life.<br/>海。青。生命の源。</h2>

              <GradientSquare gradient={'linear-gradient(90deg, #FCD68D 0%, #FB7B5F 100%)'}/>
              <h2 style={{minHeight: '20vh'}}>Artifacts. Red. Our Culture.<br/>人工物。赤。我々の文化。</h2>

              <GradientSquare gradient={'linear-gradient(90deg, #D88DFC 0%, #755FFB 100%)'}/>
              <h2 style={{minHeight: '20vh'}}>Beauty that doesnt fit descriptions.<br/>枠組みに嵌らない美しいもの。</h2>
            </>
          }
          {newPostNumber > 0 && <p>新しい場所追加：{newPostNumber}個</p>}
            {fetchedData && fetchedData.map(doc => {
              return (
                <div
                  style={{
                    transformStyle: 'flat',
                    perspective: '600px'
                  }}
                  key={doc.id}
                >
                  <PostThumbNail
                    id={doc.id}
                    title={doc.data.name}
                    type={doc.data.type}
                  />
                </div>
              )
            })}
          <div
            style={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              flexDirection: 'column',
              gap: '1em',
              padding: '5% 0',
            }}
          >
            <div
              style={{
                backgroundColor:'black',
                width:'1px',
                height: '100px',
              }}
            />
            <h2
              style={{
                writingMode:'vertical-rl',
                textOrientation:'mixed'
              }}
            >
              終わり。
              <br/>
              The End.
            </h2>
          </div>
        </StaticGrid>
      </div>
    </div>
  )
}
