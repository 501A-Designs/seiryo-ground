import React, {useState,useEffect} from 'react'
import Head from 'next/head'
import AlignItems from '../lib/alignment/AlignItems'
import PostThumbNail from '../lib/component/PostThumbNail'
import Button from '../lib/button/Button'

import { useRouter } from 'next/router'

import {app,analytics,auth,db} from '../firebase'
import { useAuthState, useSignInWithGoogle } from 'react-firebase-hooks/auth';
import { doc, collection, query, where } from "firebase/firestore";

import LoadingBar from 'react-top-loading-bar';

import StaticGrid from '../lib/alignment/StaticGrid'

import CreatePlaceForm from '../lib/landing-page/CreatePlaceForm'
import DistortionCarousel from '../lib/landing-page/DistortionCarousel'
import { useCollection, useDocument } from 'react-firebase-hooks/firestore';

import End from '../lib/End'
import Masonry, {ResponsiveMasonry} from "react-responsive-masonry"

import { useAutoAnimate } from '@formkit/auto-animate/react'
import {notificationSound, selectSound, tapSound} from '../lib/ux/audio'
import { signOut } from 'firebase/auth'
import Select from 'react-select'
import { prefectureData } from '../prefectureData'

import LeftPannel from '../lib/landing-page/LeftPannel'
import WelcomeHeader from '../lib/landing-page/WelcomeHeader'
import CreatePlaceFormContainer from '../lib/landing-page/CreatePlaceFormContainer'
import { FiCheckCircle, FiCornerLeftUp, FiGithub, FiInfo, FiLogIn, FiLogOut } from 'react-icons/fi'
import Container from '../lib/component/Container'
import { ClipLoader } from 'react-spinners'
import MainBody from '../lib/component/MainBody'
import GettingStartedModal from '../lib/landing-page/GettingStartedModal'
import RightPannel from '../lib/landing-page/RightPannel'
import MainAlign from '../lib/alignment/MainAlign'
import Rating from '../lib/Rating'
import Grid from '../lib/alignment/Grid'

export default function Home() {
  let masonaryGrid = {350: 1, 750: 2, 900: 3, 1200:4}
  const router = useRouter();

  const [parent] = useAutoAnimate();
  const [progress, setProgress] = useState(0);  
  
  // Modal / Popup State
  const [gettingStartedModalIsOpen, setGettingStartedModalIsOpen] = useState(false);

  // Auth & Firestore
  const [signInWithGoogle] = useSignInWithGoogle(auth);
  const [user] = useAuthState(auth);
  const [placesCollection, placeCollectionLoading] = useCollection(collection(db, `places`))

  const [prefectureInput, setPrefectureInput] = useState('東京都');
  const [userLikesArray] = useDocument(doc(db, `users/${user && user.uid}`));

  useEffect(() => {
    if (user && user.metadata.creationTime == user.metadata.lastSignInTime && userLikesArray !== undefined) {
      // console.log(user.metadata.creationTime,user.metadata.lastSignInTime)
      setGettingStartedModalIsOpen(true)
    }
  }, [user])

  const [filteredPlaces,filteredPlacesLoading] = useCollection(query(collection(db, `places`),where("prefecture", "==",`${prefectureInput && prefectureInput}`)));

  const selectStyle = {
    option: (provided, state) => ({
      ...provided,
      backgroundColor: state.isSelected ? 'black' : 'white',
      color: state.isSelected ? 'white' : 'black',
      padding: '0.5em 1em',
      "&:hover": {
        cursor: 'pointer',
        background: "var(--sgLightGray)",
        color:'black',
      }
    }),
    control: base => ({
      ...base,
      // none of react-select's styles are passed to <Control />
      margin: '0',
      borderRadius:'5px',
      border:'none',
      borderBottom: '1px solid var(--sgGray)',
      padding:'0em',
      fontSize: '1.2em',
      outline: 'none',
      color: 'black',
      width:'100px',
      boxShadow: 'none',
      fontWeight: 'bold',
      transform: 'translateY(-1.5px)',
      // backgroundColor: 'rgb(248, 248, 248)',
      "&:hover": {
        cursor: 'pointer',
      }
    }),
    singleValue: (provided, state) => {
      const opacity = state.isDisabled ? 0.5 : 1;
      const transition = 'opacity 300ms';
      return { ...provided, opacity, transition };
    }
  }

  return (
    <MainBody>
      <LoadingBar
        color='black'
        progress={progress}
        onLoaderFinished={() => setProgress(0)}
      />
      <Head>
        <title>SEIRYO GROUND</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
      <GettingStartedModal
        modalState={gettingStartedModalIsOpen}
        user={user}
        closeModal={()=>{
          setGettingStartedModalIsOpen(false);
          notificationSound();
        }}
      />

      <MainAlign>
        <LeftPannel user={user}>
          {!user &&
            <Button
              color='transparent'
              iconPosition={'left'}
              icon={<FiLogIn/>}
              onClick={()=>{
                signInWithGoogle();
              }}
            >
              ログイン
            </Button>
          }
          <Button
            color='transparent'
            iconPosition={'left'}
            icon={<FiCheckCircle/>}
            onClick={()=>{
              router.push('/news');
            }}
          >
            ニュース
          </Button>
          <Button
            color='transparent'
            iconPosition={'left'}
            icon={<FiInfo/>}
            onClick={()=>{
              router.push('/about');
            }}
          >
            清涼広場とは
          </Button>
          <Button
            color='transparent'
            iconPosition={'left'}
            icon={<FiGithub/>}
            onClick={()=>{
              router.push('https://github.com/501A-Designs/seiryo-ground');
            }}
          >
            GitHubを開く
          </Button>
          {user &&
            <Button
              color='transparent'
              iconPosition={'left'}
              icon={<FiLogOut/>}
              onClick={()=>{
                signOut(auth)
              }}
            >
              ログアウト
            </Button>
          }
        </LeftPannel>

        <RightPannel>
          <StaticGrid gap={'3em'}>
            <StaticGrid>
              <WelcomeHeader/>
              <DistortionCarousel
                images={[
                  '/mountain-green.jpg',
                  '/sg-mountain2.png',
                  '/blue-sky.jpg',
                  '/sg-mountain.png',
                  '/open-nakameguro.jpg',
                ]}
                displacmentImage={'https://raw.githubusercontent.com/robin-dela/hover-effect/master/images/heightMap.png'}
                speed={0.8}
              />
            </StaticGrid>

            {user &&
              <CreatePlaceFormContainer>
                <CreatePlaceForm user={user}/>
              </CreatePlaceFormContainer>
            }


            <Container>
              <Grid gap={'small'}>
                <h2>Highlights</h2>
                <Grid grid={'quad'} gap={'extraSmall'}>
                  <Rating
                    borderRadius={'left'}
                    rating={'10'}
                    description={'最寄駅からのアクセス'}
                  />
                  <Rating
                    rating={'5'}
                    description={'最寄駅からのアクセス'}
                  />
                  <Rating
                    rating={'8'}
                    description={'最寄駅からのアクセス'}
                  />
                  <Rating
                    borderRadius={'right'}
                    rating={'9'}
                    description={'最寄駅からのアクセス'}
                  />
                </Grid>
              </Grid>
            </Container>

            <Container ref={parent}>
              <Grid gap={'small'}>
                <AlignItems spaceBetween>
                  <h2>More than 0 likes</h2>
                </AlignItems>
                {placesCollection && <ResponsiveMasonry
                  columnsCountBreakPoints={masonaryGrid}
                >
                  <Masonry gutter={'0.25em'}>
                    {placesCollection.docs.map(doc => {
                      if (doc.data().likes.length > 0) {
                        return (
                          <PostThumbNail
                            key={doc.id}
                            id={doc.id}
                            title={doc.data().name}
                            type={doc.data().type}
                          />
                        )
                      }
                    })}
                  </Masonry>
                </ResponsiveMasonry>}
                {placeCollectionLoading && 
                  <Container
                    type='standard'
                    alignment='center'
                  >
                    <ClipLoader color="black"/>
                  </Container>
                }
              </Grid>
            </Container>

            {/* Filter Section */}
            <Container>
              <Grid gap={'small'}>
                <AlignItems spaceBetween>
                  <AlignItems gap={'0em'}>
                    <h2>Filter:</h2>
                    <Select
                      styles={selectStyle}
                      options={prefectureData}
                      components={{ DropdownIndicator:() => null, IndicatorSeparator:() => null }}
                      onChange={(e)=>{
                        selectSound();
                        setPrefectureInput(e.value);
                      }}
                      placeholder={prefectureInput ? prefectureInput:'都道府県を選択'}
                    />
                  </AlignItems>
                  {filteredPlaces && filteredPlaces.docs.length > 0 && <h3>合計{filteredPlaces.docs.length}カ所</h3>}
                </AlignItems>
                <div ref={parent}>
                  {filteredPlaces && filteredPlaces.docs.length > 0 ?
                    <ResponsiveMasonry columnsCountBreakPoints={masonaryGrid}>
                      <Masonry gutter={'0.25em'}>
                        {filteredPlaces.docs.map(doc => {
                          return (
                            <PostThumbNail
                              key={doc.id}
                              id={doc.id}
                              title={doc.data().name}
                              type={doc.data().type}
                            />
                          )
                        })}
                      </Masonry>
                    </ResponsiveMasonry>:
                    <>
                      {!filteredPlacesLoading &&
                        <Container
                          type='standard'
                          alignment='center'
                        >
                          <p>{prefectureInput}にある場所は現在何も見つかりません。</p>
                        </Container>
                      }
                    </>
                  }
                  {filteredPlacesLoading &&
                    <Container
                      type='standard'
                      alignment='center'
                    >
                      <ClipLoader color="black"/>
                    </Container>
                  }
                </div>
              </Grid>
            </Container>

            {/* All Locations */}
            <Container>
              <StaticGrid gap={'0.7em'}>
                <AlignItems spaceBetween>
                  <h2>All Locations</h2>
                </AlignItems>
                {placesCollection && <ResponsiveMasonry
                  columnsCountBreakPoints={masonaryGrid}
                >
                  <Masonry
                    gutter={'0.25em'}
                    columnsCountBreakPoints={{350: 1, 750: 2, 900: 3, 1200:4,1500:6}}
                  >
                    {placesCollection.docs.map(doc => {
                      return (
                        <PostThumbNail
                          key={doc.id}
                          id={doc.id}
                          title={doc.data().name}
                          type={doc.data().type}
                        />
                      )
                    })}
                  </Masonry>
                </ResponsiveMasonry>}
                {placeCollectionLoading && 
                  <Container
                    type='standard'
                    alignment='center'
                  >
                    <ClipLoader color="black"/>
                  </Container>
                }
              </StaticGrid>
            </Container>
          </StaticGrid>
        </RightPannel>
      </MainAlign>
    </MainBody>
  )
}
