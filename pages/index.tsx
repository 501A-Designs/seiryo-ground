import React, {useState,useEffect} from 'react'
import Head from 'next/head'
import AlignItems from '../lib/alignment/AlignItems'
import PostThumbNail from '../lib/component/PostThumbNail'
import Button from '../lib/button/Button'

import { useRouter } from 'next/router'

import {auth,db} from '../firebase'
import { useAuthState } from 'react-firebase-hooks/auth';
import { doc, collection, query, where, getDoc } from "firebase/firestore";

import CreatePlaceForm from '../lib/landing-page/CreatePlaceForm'
import DistortionCarousel from '../lib/landing-page/DistortionCarousel'
import { useCollection } from 'react-firebase-hooks/firestore';

import Masonry, {ResponsiveMasonry} from "react-responsive-masonry"

import { useAutoAnimate } from '@formkit/auto-animate/react'
import { signOut } from 'firebase/auth'
import Select from 'react-select'
import { prefectureData } from '../prefectureData'

import WelcomeHeader from '../lib/landing-page/WelcomeHeader'
import { FiInfo } from 'react-icons/fi'
import Container from '../lib/component/Container'
import { ClipLoader } from 'react-spinners'
import MainAlign from '../lib/alignment/MainAlign'
import Rating from '../lib/Rating'
import Grid from '../lib/alignment/Grid'
import PopularPlace from '../lib/landing-page/PopularPlace'
import ThisMonthPlace from '../lib/ThisMonthPlace'
import useSound from 'use-sound'
import Footer from '../lib/component/Footer'
import UniversalNav from '../lib/component/UniversalNav'
import Dialog from '../lib/component/Dialog'
import BodyMargin from '../lib/alignment/Margin'
import Margin from '../lib/alignment/Margin'
import End from '../lib/End'
import { styled } from '../stitches.config'


const Heading = styled('h2',{
  fontFamily:'$sgFont2'
})

export default function Home() {
  let masonaryGrid = {350: 1, 750: 2, 900: 3, 1200:4}
  const router = useRouter();

  const [parent] = useAutoAnimate();
  const [progress, setProgress] = useState(0);  

  // Sound
  const [select1] = useSound('/sound/select-1-sg.mp3');
  const [alert1] = useSound('/sound/alert-1-sg.mp3');
  
  // Modal / Popup State
  const [gettingStartedModalIsOpen, setGettingStartedModalIsOpen] = useState(false);

  // Auth & Firestore
  const [user] = useAuthState(auth);
  const [placesCollection, placeCollectionLoading] = useCollection(collection(db, `places`))

  const [prefectureInput, setPrefectureInput] = useState('東京都');
  const userData = getDoc(doc(db, `users/${user && user.uid}`));

  useEffect(() => {
    if (
      user &&
      user.metadata.creationTime == user.metadata.lastSignInTime
    ){
      setGettingStartedModalIsOpen(true)
      if (localStorage.getItem('getStartedComplete')) {
        setGettingStartedModalIsOpen(false)
      }
    }
  }, [user])

  const [filteredPlaces,filteredPlacesLoading] = useCollection(query(collection(db, `places`),where("prefecture", "==",`${prefectureInput && prefectureInput}`)));

  const selectStyle = {
    option: (provided, state) => ({
      ...provided,
      backgroundColor: state.isSelected ? 'black' : 'white',
      color: state.isSelected ? 'white' : 'black',
      padding: '0.5em 1em',
      "&:hover": {
        cursor: 'pointer',
        background: "var(--sgLightGray)",
        color:'black',
      }
    }),
    control: base => ({
      ...base,
      // none of react-select's styles are passed to <Control />
      margin: '0',
      borderRadius:'5px',
      border:'none',
      borderBottom: '1px solid var(--sgGray)',
      padding:'0em',
      fontSize: '1.2em',
      outline: 'none',
      color: 'black',
      width:'100px',
      boxShadow: 'none',
      fontWeight: 'bold',
      transform: 'translateY(-1.5px)',
      // backgroundColor: 'rgb(248, 248, 248)',
      "&:hover": {
        cursor: 'pointer',
      }
    }),
    singleValue: (provided, state) => {
      const opacity = state.isDisabled ? 0.5 : 1;
      const transition = 'opacity 300ms';
      return { ...provided, opacity, transition };
    }
  }

  return (
    <>
      <Head>
        <title>SEIRYO GROUND</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
      {/* <GettingStartedModal
        modalState={gettingStartedModalIsOpen}
        user={user}
        closeModal={()=>{
          setGettingStartedModalIsOpen(false);
          alert1();
        }}
      /> */}
      <Grid>
        <WelcomeHeader/>
        <DistortionCarousel
          images={[
            '/mountain-green.jpg',
            '/sg-mountain2.png',
            '/blue-sky.jpg',
            '/sg-mountain.png',
            '/open-nakameguro.jpg',
          ]}
          displacmentImage={'https://raw.githubusercontent.com/robin-dela/hover-effect/master/images/heightMap.png'}
          speed={0.8}
        />
      </Grid>
      <Margin>
        <Grid gap={'extraExtraLarge'}>
          {/* <Container>
            <Grid gap={'small'}>
              <AlignItems spaceBetween>
                <Grid>
                  <h2>Explore</h2>
                  <p>清涼広場で一番人気な場所です</p>
                </Grid>
              </AlignItems>
              <PopularPlace placeId={'0vfygL14nXcv0iSNgrt9'}/>
              <ThisMonthPlace placeId={'0vfygL14nXcv0iSNgrt9'}/>
            </Grid>
          </Container> */}

          <Container ref={parent}>
            <Grid gap={'small'}>
              <AlignItems spaceBetween>
                <Heading>Most Liked</Heading>
              </AlignItems>
              {placesCollection && <ResponsiveMasonry
                columnsCountBreakPoints={masonaryGrid}
              >
                <Masonry gutter={'0.25em'}>
                  {placesCollection.docs.map(doc => {
                    if (doc.data().likes.length > 0) {
                      return (
                        <PostThumbNail
                          key={doc.id}
                          id={doc.id}
                          title={doc.data().name}
                          type={doc.data().type}
                        />
                      )
                    }
                  })}
                </Masonry>
              </ResponsiveMasonry>}
              {placeCollectionLoading && 
                <Container
                  type='standard'
                  alignment='center'
                >
                  <ClipLoader color="black"/>
                </Container>
              }
            </Grid>
          </Container>

          {/* Filter Section */}
          <Container>
            <Grid gap={'small'}>
              <AlignItems spaceBetween>
                <AlignItems gap={'0em'}>
                  <Heading>Filter:</Heading>
                  <Select
                    styles={selectStyle}
                    options={prefectureData}
                    components={{ DropdownIndicator:() => null, IndicatorSeparator:() => null }}
                    onChange={(e)=>{
                      select1();
                      setPrefectureInput(e.value);
                    }}
                    placeholder={prefectureInput ? prefectureInput:'都道府県を選択'}
                  />
                </AlignItems>
                {filteredPlaces?.docs.length > 0 && <Heading>{filteredPlaces?.docs.length} Found</Heading>}
              </AlignItems>
              <div>
                {filteredPlaces && filteredPlaces.docs.length > 0 ?
                  <ResponsiveMasonry columnsCountBreakPoints={masonaryGrid}>
                    <Masonry gutter={'0.25em'}>
                      {filteredPlaces.docs.map(doc => {
                        return (
                          <PostThumbNail
                            key={doc.id}
                            id={doc.id}
                            title={doc.data().name}
                            type={doc.data().type}
                          />
                        )
                      })}
                    </Masonry>
                  </ResponsiveMasonry>:
                  <>
                    {!filteredPlacesLoading &&
                      <Container
                        type='standard'
                        alignment='center'
                      >
                        <p>{prefectureInput}にある場所は現在何も見つかりません。</p>
                      </Container>
                    }
                  </>
                }
                {filteredPlacesLoading &&
                  <Container
                    type='standard'
                    alignment='center'
                  >
                    <ClipLoader color="black"/>
                  </Container>
                }
              </div>
            </Grid>
          </Container>

          {/* All Locations */}
          <Container>
            <Grid gap={'medium'}>
              <Heading>All Locations</Heading>
              {placesCollection && 
                <ResponsiveMasonry
                  columnsCountBreakPoints={masonaryGrid}
                >
                  <Masonry
                    gutter={'0.25em'}
                    columnsCountBreakPoints={{350: 1, 750: 2, 900: 3, 1200:4,1500:6}}
                  >
                    {placesCollection.docs.map(doc => {
                      return (
                        <PostThumbNail
                          key={doc.id}
                          id={doc.id}
                          title={doc.data().name}
                          type={doc.data().type}
                        />
                      )
                    })}
                  </Masonry>
                </ResponsiveMasonry>
              }
              {placeCollectionLoading && 
                <Container
                  type='standard'
                  alignment='center'
                >
                  <ClipLoader color="black"/>
                </Container>
              }
            </Grid>
          </Container>
        </Grid>
      </Margin>
      <End>
        おわり。
        <br/>
        The End.
      </End>
      <Footer type={'blur'}/>
      <UniversalNav
        showInitially={false}
        scrollPop={true}
        popOnMount={false}
        minSize={'s'}
        maxSize={'l'}
        dynamicButton={user ? 
          <CreatePlaceForm user={user}/>:
          <Button
            size={'small'}
            styleType={'transparent'}
            icon={<FiInfo/>}
            onClick={()=>router.push('/about')}
          />
        }
      />
    </>
  )
}
